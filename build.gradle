plugins {
    id 'io.spring.dependency-management' version '1.1.0'
    id "org.sonarqube" version "4.2.0.3129"
    id "jacoco"
    id "java"
}

tasks.register('aggregateJacocoTestReport', JacocoReport) {
    dependsOn = allprojects.test

    executionData files("${project(':security-app').buildDir}/jacoco/test.exec")
    executionData files("${project(':security-api').buildDir}/jacoco/test.exec")
    executionData files("${project(':shop-app').buildDir}/jacoco/test.exec")
    executionData files("${project(':shop-api').buildDir}/jacoco/test.exec")

    sourceDirectories.from = files(sourceSets.main.allJava.srcDirs)
    classDirectories.from = files(sourceSets.main.output)
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
        xml.destination file("${buildDir}/reports/jacoco/aggregateJacocoTestReport.xml")
    }
}

subprojects {
}

allprojects {

    group 'ro.adi'
    version '1.0.0'

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:3.0.5")
        }
    }

    sonarqube {
        properties {
            property "sonar.projectKey", "MadaPetru_shop-be"
            property "sonar.organization", "gorrila-shop"
            property "sonar.sources.inclusions", "src/main"
            property "sonar.tests.inclusions", "src/test"
            property "sonar.coverage.exclusions", "**/config/**, **/resources/**,**/src/test/**"
            property "sonar.coverage.jacoco.xmlReportPaths", "../build/reports/jacoco/test/jacocoTestReport.xml"
            property "sonar.host.url", "https://sonarcloud.io"
            property "sonar.log.level", "DEBUG"
            property 'sonar.verbose', 'true'
        }
    }

    jacocoTestReport {
        jacocoTestReport.dependsOn(test)
        reports {
            xml.enabled true
            html.enabled true
            html.destination file("${buildDir}/reports/jacoco")
        }
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "**/config/**"
                ])
            }))
        }
    }

    test {
        useJUnitPlatform()
    }

    dependencies {
        compileOnly libs.lombok
        annotationProcessor libs.lombok
        testCompileOnly libs.lombok
        testAnnotationProcessor libs.lombok
        implementation libs.starter.security
        runtimeOnly libs.jwt.impl
        runtimeOnly libs.jwt.jackson
        implementation libs.jwt.api
        implementation libs.retry
    }
}